from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from config.settings import BOT_TOKEN
from keyboards import reply_kb
from database.database import add_user
from ustils.state import RegistrationStates

router = Router()
bot = Bot(token=BOT_TOKEN)


@router.message(F.text=="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úçÔ∏è", RegistrationStates.full_name)
async def full_name_handler(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ -> –≤–≤–æ–¥ –∏–º–µ–Ω–∏"""
    try:
        await message.delete()
        await bot.delete_message(message.chat.id, message.message_id - 1)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(RegistrationStates.phone_number)


@router.message(RegistrationStates.phone_number)
async def phone_number_handler(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await state.update_data(full_name=message.text)

    await message.delete()
    await bot.delete_message(message.chat.id, message.message_id - 1)

    await message.answer(
        "–î–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üì±:"
    )
    await state.set_state(RegistrationStates.confirm)


@router.message(RegistrationStates.confirm)
async def confirm_handler(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await state.update_data(phone_number=message.text)

    await message.delete()
    await bot.delete_message(message.chat.id, message.message_id - 1)

    data = await state.get_data()
    print(data)
    await message.answer(
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?üßê\n\n"
        f"–ò–º—è: {data['full_name']}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['phone_number']}",
        reply_markup=reply_kb.yes_or_no_keyboard
    )
    await state.set_state(RegistrationStates.complete)


@router.message(F.text=="–î–∞‚úÖ", RegistrationStates.complete)
async def complete_handler(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await message.delete()
    await bot.delete_message(message.chat.id, message.message_id - 1)

    data = await state.get_data()
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = data['full_name']
    phone_number = data['phone_number']
    add_user(user_id, username, full_name, phone_number)
    await message.answer(
        f"{full_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!",
        reply_markup=reply_kb.main_keyboard
    )
    await state.clear()


@router.message(F.text == "–ù–µ—Ç‚ùå", RegistrationStates.complete)
async def not_register_handler(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await message.delete()
    await bot.delete_message(message.chat.id, message.message_id - 1)

    await message.answer(
        f"–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑:\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:"
    )
    await state.set_state(RegistrationStates.phone_number)